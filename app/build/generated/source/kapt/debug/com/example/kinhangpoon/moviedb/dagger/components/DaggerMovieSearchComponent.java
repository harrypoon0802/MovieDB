// Generated by Dagger (https://google.github.io/dagger).
package com.example.kinhangpoon.moviedb.dagger.components;

import com.example.kinhangpoon.moviedb.dagger.module.MovieSearchModule;
import com.example.kinhangpoon.moviedb.dagger.module.MovieSearchModule_ProvideMovieSearchApiFactory;
import com.example.kinhangpoon.moviedb.dagger.module.MovieSearchModule_ProvideViewFactory;
import com.example.kinhangpoon.moviedb.model.service.MovieSearchApi;
import com.example.kinhangpoon.moviedb.model.service.MovieSearchRepository;
import com.example.kinhangpoon.moviedb.presenter.MovieSearchPresenterImpl;
import com.example.kinhangpoon.moviedb.view.MovieSearchFragment;
import com.example.kinhangpoon.moviedb.view.MovieSearchFragment_MembersInjector;
import com.example.kinhangpoon.moviedb.view.MovieSearchView;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerMovieSearchComponent implements MovieSearchComponent {
  private Provider<MovieSearchView> provideViewProvider;

  private com_example_kinhangpoon_moviedb_dagger_components_NetworkComponent_exposeRetrofit
      exposeRetrofitProvider;

  private Provider<MovieSearchApi> provideMovieSearchApiProvider;

  private DaggerMovieSearchComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private MovieSearchRepository getMovieSearchRepository() {
    return new MovieSearchRepository(provideMovieSearchApiProvider.get());
  }

  private MovieSearchPresenterImpl getMovieSearchPresenterImpl() {
    return new MovieSearchPresenterImpl(provideViewProvider.get(), getMovieSearchRepository());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideViewProvider =
        DoubleCheck.provider(
            MovieSearchModule_ProvideViewFactory.create(builder.movieSearchModule));
    this.exposeRetrofitProvider =
        new com_example_kinhangpoon_moviedb_dagger_components_NetworkComponent_exposeRetrofit(
            builder.networkComponent);
    this.provideMovieSearchApiProvider =
        DoubleCheck.provider(
            MovieSearchModule_ProvideMovieSearchApiFactory.create(
                builder.movieSearchModule, exposeRetrofitProvider));
  }

  @Override
  public void inject(MovieSearchFragment fragment) {
    injectMovieSearchFragment(fragment);
  }

  private MovieSearchFragment injectMovieSearchFragment(MovieSearchFragment instance) {
    MovieSearchFragment_MembersInjector.injectMovieSearchPresenter(
        instance, getMovieSearchPresenterImpl());
    return instance;
  }

  public static final class Builder {
    private MovieSearchModule movieSearchModule;

    private NetworkComponent networkComponent;

    private Builder() {}

    public MovieSearchComponent build() {
      if (movieSearchModule == null) {
        throw new IllegalStateException(
            MovieSearchModule.class.getCanonicalName() + " must be set");
      }
      if (networkComponent == null) {
        throw new IllegalStateException(NetworkComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMovieSearchComponent(this);
    }

    public Builder movieSearchModule(MovieSearchModule movieSearchModule) {
      this.movieSearchModule = Preconditions.checkNotNull(movieSearchModule);
      return this;
    }

    public Builder networkComponent(NetworkComponent networkComponent) {
      this.networkComponent = Preconditions.checkNotNull(networkComponent);
      return this;
    }
  }

  private static
  class com_example_kinhangpoon_moviedb_dagger_components_NetworkComponent_exposeRetrofit
      implements Provider<Retrofit> {
    private final NetworkComponent networkComponent;

    com_example_kinhangpoon_moviedb_dagger_components_NetworkComponent_exposeRetrofit(
        NetworkComponent networkComponent) {
      this.networkComponent = networkComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          networkComponent.exposeRetrofit(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
