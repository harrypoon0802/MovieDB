// Generated by Dagger (https://google.github.io/dagger).
package com.example.kinhangpoon.moviedb.dagger.components;

import android.content.Context;
import com.example.kinhangpoon.moviedb.dagger.module.NetworkModule;
import com.example.kinhangpoon.moviedb.dagger.module.NetworkModule_ProvideContextFactory;
import com.example.kinhangpoon.moviedb.dagger.module.NetworkModule_ProvideRetrofitFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerNetworkComponent implements NetworkComponent {
  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<Context> provideContextProvider;

  private DaggerNetworkComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideRetrofitProvider =
        DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(builder.networkModule));
    this.provideContextProvider =
        DoubleCheck.provider(NetworkModule_ProvideContextFactory.create(builder.networkModule));
  }

  @Override
  public Retrofit exposeRetrofit() {
    return provideRetrofitProvider.get();
  }

  @Override
  public Context exposeContext() {
    return provideContextProvider.get();
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private Builder() {}

    public NetworkComponent build() {
      if (networkModule == null) {
        throw new IllegalStateException(NetworkModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerNetworkComponent(this);
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }
}
