// Generated by Dagger (https://google.github.io/dagger).
package com.example.kinhangpoon.moviedb.dagger.components;

import com.example.kinhangpoon.moviedb.dagger.module.MovieDetailModule;
import com.example.kinhangpoon.moviedb.dagger.module.MovieDetailModule_ProvideViewFactory;
import com.example.kinhangpoon.moviedb.presenter.MovieDetailPresenterImpl;
import com.example.kinhangpoon.moviedb.view.MovieDetailFragment;
import com.example.kinhangpoon.moviedb.view.MovieDetailFragment_MembersInjector;
import com.example.kinhangpoon.moviedb.view.MovieDetailView;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerMovieDetailComponent implements MovieDetailComponent {
  private Provider<MovieDetailView> provideViewProvider;

  private DaggerMovieDetailComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private MovieDetailPresenterImpl getMovieDetailPresenterImpl() {
    return new MovieDetailPresenterImpl(provideViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideViewProvider =
        DoubleCheck.provider(
            MovieDetailModule_ProvideViewFactory.create(builder.movieDetailModule));
  }

  @Override
  public void inject(MovieDetailFragment fragment) {
    injectMovieDetailFragment(fragment);
  }

  private MovieDetailFragment injectMovieDetailFragment(MovieDetailFragment instance) {
    MovieDetailFragment_MembersInjector.injectMovieDetailPresenter(
        instance, getMovieDetailPresenterImpl());
    return instance;
  }

  public static final class Builder {
    private MovieDetailModule movieDetailModule;

    private Builder() {}

    public MovieDetailComponent build() {
      if (movieDetailModule == null) {
        throw new IllegalStateException(
            MovieDetailModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerMovieDetailComponent(this);
    }

    public Builder movieDetailModule(MovieDetailModule movieDetailModule) {
      this.movieDetailModule = Preconditions.checkNotNull(movieDetailModule);
      return this;
    }
  }
}
